{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","info","this","setState","Component","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","res","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.42f7f6b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      { props.children }\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Oooops.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return <h1 className='f1'>RoboFriends</h1>\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\n\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport './App.css';\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { robots, searchField, onSearchChange, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n      <div className='tc'>\n        <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          { isPending ? <h1>Loading</h1> :\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundary>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// action done from mapDispatchToProps will channge state from mapStateToProps\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state\n  }\n}\n\nconst initialStateRobots = {\n  robots: [],\n  isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ requestRobots, searchRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}